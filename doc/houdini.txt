*houdini.txt*

Escape almost "everything" with a simple two character mapping without delay

License:	GLP3
Website:	https://github.com/TheBlob42/houdini.nvim

==============================================================================
INTRO                                                 *houdini* *houdini.nvim*

If you are using a custom key mapping like `jk` to leave insert, terminal or
command mode you probably have noticed that there is a slight "delay" after
typing the first character. This is Neovim waiting for |timeoutlen| to see if
you type the second character of your mapping or if it should insert the
actual character instead.

With `houdini` these characters will be inserted into the buffer right away.
After each character the plugin checks if you have typed on of the configured
escape sequences within the timeout. If this the case the corresponding escape
sequence will be triggered, which by default will delete the inserted
characters and escape the current mode. This way you will not experience any
delay while typing.

To check the already typed characters `houdini` uses the builtin
|vim.on_key()| function.

By default `houdini` works for the following modes (see |mode()|):

- |Insert-mode|
- |Terminal-mode|
- |Command-line-mode|
- |Operator-pending-mode|
- |Visual-mode|
- |Select-mode|
- |Replace-mode|
- |Virtual-Replace-mode|
- |Ex-mode|

Some modes might require additional configuration depending on the used escape
sequence. Especially modes where certain key presses might cause deletions
and/or switch to another mode like |Operator-pending-mode| and |Visual-mode|.

Note: See also |houdini-configuration|

==============================================================================
INSTALLATION                                            *houdini-installation*

The plugin requires at least Neovim version >= 0.10.0

Install with your favorite plugin manager and call the `setup` function.

LAZY~
(https://github.com/folke/lazy.nvim)
>lua
	{
		'TheBlob42/houdini.nvim',
		config = function()
			require('houdini').setup()
		end
	}
<
==============================================================================
CONFIGURATION                                          *houdini-configuration*

You need to call the `setup` function at least once, which will by default
initialize `houdini` with its default settings:
>lua
    require('houdini').setup {
        mappings = { 'jk' },
        timeout = vim.o.timeoutlen,
        check_modified = true,
		escape_sequences = {
			['i']    = '<BS><BS><ESC>',
			['ic']   = '<BS><BS><ESC>',
			['ix']   = '<BS><BS><ESC>',
			['R']    = '<BS><BS><RIGHT><ESC>',
			['Rc']   = '<BS><BS><ESC>',
			['Rx']   = '<BS><BS><ESC>',
			['Rv']   = '<BS><BS><RIGHT><ESC>',
			['Rvc']  = '<BS><BS><ESC>',
			['Rvx']  = '<BS><BS><ESC>',
			['t']    = '<BS><BS><C-\\><C-n>',
			['c']    = '<BS><BS><C-c>',
			['cv']   = ('<BS>'):rep(100) .. 'vi<CR>'
			['v']    = escape_and_undo,
			['vs']   = escape_and_undo,
			['V']    = escape_and_undo,
			['Vs']   = escape_and_undo,
			['']   = escape_and_undo,
			['s']  = escape_and_undo,
			['no']   = escape_and_undo,
			['nov']  = escape_and_undo,
			['noV']  = escape_and_undo,
			['no'] = escape_and_undo,
			['s']  = '<BS><BS><ESC>:u! | call histdel("cmd", -1) | echo ""<CR>',
			['S']  = '<BS><BS><ESC>:u! | call histdel("cmd", -1) | echo ""<CR>',
			[''] = '<BS><BS><ESC>:u! | call histdel("cmd", -1) | echo ""<CR>',
		},
    }
<
By passing your own configuration table to the `setup` function you can
override these defaults with your own preference:
>lua
	require('houdini').setup {
		mappings = { 'fd' } -- the author's preferred escape mapping ;-)
	}
<
The `setup` function can savely be called multiple times with different
configurations which will simply overwrite the previous settings (no restart
required). This might be helpful when testing for example different timeout
values or custom escape sequences.

------------------------------------------------------------------------------
MAPPINGS                                             *houdini-config-mappings*

A list of two character mappings that you would like to use to trigger the
"escaping".

If you just want to "smash" two keys for escaping without having to care about
the order of them, you simply have to add both combinations to the list:
>lua
	require('houdini').setup {
		mappings = { 'fd', 'df' }
	}
<
------------------------------------------------------------------------------
TIMEOUT                                               *houdini-config-timeout*

The time (in ms) in which both keys have to be pressed to trigger the escape.
Defaults to |timeoutlen|.

------------------------------------------------------------------------------
CHECK MODIFIED                                 *houdini-config-check-modified*

Neovim will always mark a buffer as |modified| after you've escaped insert
mode via `houdini`. This is because inserting and deleting characters is
considered a "change", even if you did not change any text (see |changetick|).
With this option enabled `houdini` will compare the changes made after leaving
insert mode and suppress the |modified| status by Neovim, so that it works
more like pressing `<ESC>`.

This feature will not do anything in the following cases:

- the buffer was |modified| already before entering insert mode
- you changed some text while entering insert mode using for example |S|, |C|
  or |o|

------------------------------------------------------------------------------
ESCAPE SEQUENCES                             *houdini-config-escape-sequences*

These are the escape sequences used to exit a certain mode.

See |mode()| for a complete list of all the available modes.
Remark that not all modes will work with the `houdini` plugin.

The following options are allowed as escape sequences:

- A `string` key mapping that should be executed
- A Lua function that is called when a mapping for the specific mode was
  triggered. Returns a string representing the key sequence that should be
  executed. Receives the following arguments:
	- char_one: (string) first char of the mapping
	- char_two: (string) second char of the mapping
	- pos: (table) last cursor position
	- tick: (number) last value of |changedtick|
- Set the value to `false` in order to disable `houdini` for this specific
  mode (`nil` does NOT work)

You can provide another string sequence or even a Lua function which receives
both chars as parameters for even more customization:
>lua
	require('houdini').setup {
		mappings = { 'jk', 'AA', 'II' },
		escape_sequences = {
			['i'] = function(char_one, char_two, pos, tick)
				local seq = char_one..char_two

				if seq == 'AA' then
					-- jump to the end of the line in insert mode
					return '<BS><BS><End>'
				end

				if seq == 'II' then
					-- jump to the beginning of the line in insert mode
					return '<BS><BS><Home>'
				end

				-- you can also deactivate houdini for certain
				-- occasions by simply returning an empty string
				if vim.opt.filetype:get() == 'TelescopePrompt' then
					return ''
				end

				return '<BS><BS><ESC>'
			end,
			-- set the sequence of a specific mode to `false`
			-- in order to completely disable houdini for this mode
			['c'] = false,
		},
	}
<
------------------------------------------------------------------------------
ESCAPE_AND_UNDO              *houdini-config-escape-sequences-escape-and-undo*

The `escape_and_undo` function is by default used to escape |Visual-mode| and
|Operator-pending-mode|. It does so by using the `<ESC>` keycode for escaping
the current mode and afterwards checking the |b:changedtick| buffer variable
for changes in order to undo them if necessary. It then also restores the
former cursor position.

It should cover most cases for those modes and was tested with a variety of
mappings. However if it does not work with your custom mapping you would need
to adopt the corresponding escape sequence(s) accordingly. Check the functions
source code for some inspiration on what is possible.

==============================================================================
TROUBLESHOOTING                                      *houdini-troubleshooting*

MACROS WITH |:normal|~

In case you encounter issues while executing macros via |:normal| you might
need to update your Neovim version to at least `v0.10.0-dev-1902+g184f84234`
(20.12.2023):
https://github.com/TheBlob42/houdini.nvim/issues/7

LIGHTSPEED~

There is a known issue with `lightspeed.nvim` which blocks the first `<BS>`
after a jump and changing text:
https://github.com/ggandor/lightspeed.nvim/issues/140

This might conflict with the default escape sequence for insert mode.
Fortunately there is a simple workaround to mitigate this problem:
>lua
	vim.cmd('autocmd User LightspeedSxLeave normal a')
<
==============================================================================
vim:tw=78:sw=4:ts=4:noet:ft=help:norl
